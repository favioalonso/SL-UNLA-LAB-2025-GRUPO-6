{
	"info": {
		"_postman_id": "43205a1b-2acf-4ee5-9be1-205353054cb9",
		"name": "Collection",
		"description": "# ðŸš€ Get started here\n\nThis template guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## ðŸ”– **How to use this template**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these [request](https://learning.postman.com/docs/sending-requests/requests/) types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT request.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n ```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a [variable](https://learning.postman.com/docs/sending-requests/variables/) called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Scripts\" tab**\n\nAdding tests to your requests can help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/fa30ea0a-373d-4545-a668-e7b283cca343/aW1hZ2UucG5n\" alt=\"\" height=\"1530\" width=\"2162\">\n\n## ðŸ’ª Pro tips\n\n- Use folders to group related requests and organize the collection.\n    \n- Add more [scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) to verify if the API works as expected and execute workflows.\n    \n\n## ðŸ’¡Related templates\n\n[API testing basics](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[API documentation](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9c28f47-1253-44af-a2f3-20dce4da1f18&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[Authorization methods](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=31a9a6ed-4cdf-4ced-984c-d12c9aec1c27&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "48568835",
		"_collection_link": "https://martinezmartina2002-8227090.postman.co/workspace/SL-UNLA-LAB-2025-GRUPO-6~b3af5226-5a15-47ca-83a4-a6b689140551/collection/48613094-43205a1b-2acf-4ee5-9be1-205353054cb9?action=share&source=collection_link&creator=48568835"
	},
	"item": [
		{
			"name": "Persona",
			"item": [
				{
					"name": "Crear persona",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"nombre\": \"pedro paramo\",\n  \"email\": \"pedro@gmail.com\",\n  \"dni\": \"12345677\",\n  \"telefono\": \"1123134810\",\n  \"fecha_nacimiento\": \"2010-09-20\",\n  \"habilitado\": true\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8000/personas",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"personas"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "Ver personas",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:8000/personas?skip=0&limit=100",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"personas"
							],
							"query": [
								{
									"key": "skip",
									"value": "0"
								},
								{
									"key": "limit",
									"value": "100"
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Ver persona por id",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:8000/personas/1",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"personas",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Actualizar persona",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful PUT request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"nombre\": \"string\",\n    \"email\": \"user@example.com\",\n    \"dni\": \"12345671\",\n    \"telefono\": \"1123134415\",\n    \"fecha_nacimiento\": \"2010-09-20\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8000/personas/2",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"personas",
								"2"
							]
						},
						"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "Eliminar persona",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8000/personas/1",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"personas",
								"1"
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "Busqueda avanzada(nombre,edad min,max))",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:8000/personas/search?nombre=Pedro&edad_min=15&edad_max=50&page=1&per_page=10",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"personas",
								"search"
							],
							"query": [
								{
									"key": "nombre",
									"value": "Pedro"
								},
								{
									"key": "edad_min",
									"value": "15"
								},
								{
									"key": "edad_max",
									"value": "50"
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "per_page",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Busqueda orden alfabetico",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:8000/personas/search?order_by=nombre&sort_order=asc",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"personas",
								"search"
							],
							"query": [
								{
									"key": "order_by",
									"value": "nombre"
								},
								{
									"key": "sort_order",
									"value": "asc"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Turno",
			"item": [
				{
					"name": "Crear turno",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"fecha\": \"2025-09-22\",\n    \"hora\": \"16:00\",\n    \"persona_id\": 3\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8000/turnos",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"turnos"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "Ver turnos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:8000/turnos?skip=0&limit=100",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"turnos"
							],
							"query": [
								{
									"key": "skip",
									"value": "0"
								},
								{
									"key": "limit",
									"value": "100"
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Ver turnos por id",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:8000/turnos/2",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"turnos",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Actualizar turno",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful PUT request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"fecha\": \"2025-09-20\",\n  \"hora\": \"09:00\",\n  \"estado\": \"pendiente\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8000/turnos/1",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"turnos",
								"1"
							]
						},
						"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "Eliminar turno",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/turnos/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"turnos",
								"1"
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "Ver disponibles",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/turnos/turnos-disponibles?fecha=2025-11-15",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"turnos",
								"turnos-disponibles"
							],
							"query": [
								{
									"key": "fecha",
									"value": "2025-11-15"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Cancelar turno",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful PUT request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{base_url}}/turnos/1/cancelar",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"turnos",
								"1",
								"cancelar"
							]
						},
						"description": "Cancela un turno cambiando su estado a 'Cancelado'. No se pueden cancelar turnos que ya fueron asistidos."
					},
					"response": []
				},
				{
					"name": "Confirmar turno",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful PUT request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{base_url}}/turnos/1/confirmar",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"turnos",
								"1",
								"confirmar"
							]
						},
						"description": "Confirma un turno cambiando su estado a 'Confirmado'. No se pueden confirmar turnos cancelados o asistidos."
					},
					"response": []
				}
			]
		},
		{
			"name": "Reportes",
			"item": [
				{
					"name": "Turnos por fecha",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/reportes/turnos-por-fecha?fecha=2025-09-25",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"reportes",
								"turnos-por-fecha"
							],
							"query": [
								{
									"key": "fecha",
									"value": "2025-09-25"
								}
							]
						},
						"description": "Devuelve todos los turnos de una fecha especÃ­fica con informaciÃ³n de la persona (nombre y DNI), sin discriminar por estado del turno."
					},
					"response": [
						{
							"name": "Ejemplo turnos de la fecha 2025-10-20",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/reportes/turnos-por-fecha?fecha=2025-09-25",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"reportes",
										"turnos-por-fecha"
									],
									"query": [
										{
											"key": "fecha",
											"value": "2025-09-25"
										}
									]
								}
							},
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "Turnos cancelados del mes actual",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/reportes/turnos-cancelados-por-mes",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"reportes",
								"turnos-cancelados-por-mes"
							]
						},
						"description": "Devuelve un reporte de los turnos cancelados del mes actual, agrupados por dÃ­a con informaciÃ³n de la persona."
					},
					"response": []
				},
				{
					"name": "Turnos por persona (DNI)",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/reportes/turnos-por-persona?dni=12345678",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"reportes",
								"turnos-por-persona"
							],
							"query": [
								{
									"key": "dni",
									"value": "12345678"
								}
							]
						},
						"description": "Devuelve todos los turnos de una persona por su DNI, sin discriminar por estado del turno."
					},
					"response": [
						{
							"name": "Ejemplo turnos con persona DNI 12345678",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/reportes/turnos-por-persona?dni=12345678",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"reportes",
										"turnos-por-persona"
									],
									"query": [
										{
											"key": "dni",
											"value": "12345678"
										}
									]
								}
							},
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "Personas con 5+ turnos cancelados",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/reportes/turnos-cancelados?min=5",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"reportes",
								"turnos-cancelados"
							],
							"query": [
								{
									"key": "min",
									"value": "5"
								}
							]
						},
						"description": "Devuelve un arreglo con informaciÃ³n de personas que tienen 5 o mÃ¡s turnos cancelados, indicando la cantidad y el detalle de los turnos cancelados."
					},
					"response": []
				},
				{
					"name": "Turnos confirmados entre fechas",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/reportes/turnos-confirmados?fecha_desde=2025-12-01&fecha_hasta=2025-12-30",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"reportes",
								"turnos-confirmados"
							],
							"query": [
								{
									"key": "fecha_desde",
									"value": "2025-12-01"
								},
								{
									"key": "fecha_hasta",
									"value": "2025-12-30"
								}
							]
						},
						"description": "Devuelve todos los turnos confirmados en un perÃ­odo de tiempo (desde-hasta, inclusive). Los resultados estÃ¡n paginados mostrando 5 registros por pÃ¡gina."
					},
					"response": [
						{
							"name": "Ejemplo turnos con fecha invÃ¡lida",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/reportes/turnos-confirmados?fecha_desde=2025-11-30&fecha_hasta=2025-11-01",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"reportes",
										"turnos-confirmados"
									],
									"query": [
										{
											"key": "fecha_desde",
											"value": "2025-11-30"
										},
										{
											"key": "fecha_hasta",
											"value": "2025-11-01"
										}
									]
								}
							},
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": null
						},
						{
							"name": "Ejemplo turnos desde 2025-10-20 hasta 2025-10-21",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/reportes/turnos-confirmados?fecha_desde=2025-11-01&fecha_hasta=2025-11-30",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"reportes",
										"turnos-confirmados"
									],
									"query": [
										{
											"key": "fecha_desde",
											"value": "2025-11-01"
										},
										{
											"key": "fecha_hasta",
											"value": "2025-11-30"
										}
									]
								}
							},
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "Personas por estado (habilitado/deshabilitado)",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/reportes/estado-personas/true",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"reportes",
								"estado-personas",
								"true"
							]
						},
						"description": "Devuelve la lista de personas filtradas por su estado de habilitaciÃ³n. Valores vÃ¡lidos: 'habilitado' o 'deshabilitado'."
					},
					"response": [
						{
							"name": "Ejemplo personas habilitadas",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/reportes/estado-personas/true",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"reportes",
										"estado-personas",
										"true"
									]
								}
							},
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": null
						},
						{
							"name": "Ejemplo personas deshabilitadas",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/reportes/estado-personas/false",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"reportes",
										"estado-personas",
										"false"
									]
								}
							},
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "Turnos cancelados del mes actual por persona",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/reportes/turnos-cancelados-por-mes-reformado",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"reportes",
								"turnos-cancelados-por-mes-reformado"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1"
		},
		{
			"key": "base_url",
			"value": "http://127.0.0.1:8000"
		}
	]
}